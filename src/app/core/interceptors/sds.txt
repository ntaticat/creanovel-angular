export class AuthInterceptor implements HttpInterceptor {

  constructor(private injector: Injector) { }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {

    if (!req.url.includes("LogInPost") && !req.url.includes("getUserSessionPost")) {
      from(this.refreshToken()).subscribe((result) => {
        if(!result) {
          // Redirected to login
          return EMPTY;
        }
        else {
          // Refresh token success
          req = req.clone({
            body: {
              ...req.body,
              Parms: {
                ...req.body.Parms,
                AccessToken: result
              }
            }
          });
          return next.handle(req).pipe(
            finalize(() => console.log("Terminó"))
          );
        }
      });
    }

    return next.handle(req).pipe(
      finalize(() => console.log("Terminó"))
    );
  }

  async refreshToken() {
    const authService = this.injector.get(UsuariosService);
    // return await authService.refreshTokenPromise();
  }
}
